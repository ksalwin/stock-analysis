#!/usr/bin/env python3
"""
Plot SMA and signals from a file generated by 0_generate_signals.py
"""

import argparse
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Plot SMA and signals from a file generated by 0_generate_signals.py"
    )
    parser.add_argument("--sma-short", type=int, default=20,  help="The short SMA period")
    parser.add_argument("--sma-long",  type=int, default=100, help="The long SMA period")
    parser.add_argument("file", type=str, help="The file to plot (generated by 0_generate_signals.py)")
    return parser.parse_args()


def load_data(file: str) -> pd.DataFrame:
    """
    Load CSV, parse DATETIME, and use it as the index (sorted).

    PARAMETERS
    ----------
    file : str
        The file to load

    RETURNS
    -------
    df : pd.DataFrame
        The loaded dataW
    """
    df = pd.read_csv(file, parse_dates=["DATETIME"])
    df = df.set_index("DATETIME").sort_index()
    return df


def plot_sma_and_signals(df: pd.DataFrame, sma_short: int, sma_long: int, n_xticks: int = 10) -> None:
    """
    Plot PRICE, SMA_short, SMA_long vs. DATETIME and mark Buy/Sell signals if available.

    PARAMETERS
    ----------
    df : pd.DataFrame
        The loaded data
    sma_short : int
        The short SMA period
    sma_long : int
        The long SMA period
    n_xticks : int, optional
        The number of x-axis ticks to show

    RETURNS
    -------
    None
    """
    # Columns
    price_col = "PRICE"
    sma_short_col = f"SMA_{sma_short}"
    sma_long_col  = f"SMA_{sma_long}"

    # Choose a signal column if present (supports Sig_short_long or Sig_long_short)
    sig_candidates = [f"Sig_{sma_short}_{sma_long}", f"Sig_{sma_long}_{sma_short}"]
    sig_col = next((c for c in sig_candidates if c in df.columns), None)

    # Ensure index is datetime
    if not isinstance(df.index, pd.DatetimeIndex):
        df = df.copy()
        df.index = pd.to_datetime(df.index)

    # Plot
    fig, ax = plt.subplots()

    # Core series (plot only if columns exist)
    if price_col in df:
        ax.plot(df.index, df[price_col], label="Price")
    if sma_short_col in df:
        ax.plot(df.index, df[sma_short_col], label=f"SMA {sma_short}")
    if sma_long_col in df:
        ax.plot(df.index, df[sma_long_col], label=f"SMA {sma_long}")

    # Signals (supports text Buy/Sell or numeric +/-1)
    if sig_col is not None:
        sigs = df[sig_col]
        if pd.api.types.is_numeric_dtype(sigs):
            buy_mask = sigs > 0
            sell_mask = sigs < 0
        else:
            s = sigs.astype("string").str.lower()
            buy_mask = s.eq("buy")
            sell_mask = s.eq("sell")

        if buy_mask.any() and price_col in df:
            ax.scatter(df.index[buy_mask], df.loc[buy_mask, price_col],
                       marker="^", s=60, label="Buy", zorder=3)
        if sell_mask.any() and price_col in df:
            ax.scatter(df.index[sell_mask], df.loc[sell_mask, price_col],
                       marker="v", s=60, label="Sell", zorder=3)

    # === Exactly ~10 x-axis labels ===
    # Pick ~10 evenly spaced tick locations across the data range
    if len(df.index) > 0:
        k = min(n_xticks, len(df.index))
        tick_idx = np.linspace(0, len(df.index) - 1, k).astype(int)
        tick_locs = df.index[tick_idx]
        ax.set_xticks(tick_locs)
        # Compact date labels
        ax.set_xticklabels([d.strftime("%Y-%m-%d") for d in tick_locs], rotation=0)

    # Set labels
    ax.set_xlabel("DATETIME")
    ax.set_ylabel("Price")
    
    # Set grid
    # alpha is the transparency of the grid
    ax.grid(True, alpha=0.3)

    # Set legend. loc="best" means the legend will be placed in the best location.
    ax.legend(loc="best")

    # Set tight layout, which adjusts the padding between the axes and the figure edges.
    plt.tight_layout()

    # Show the plot, which will open a new window.
    plt.show()


def main() -> None:
    args = parse_args()
    df = load_data(args.file)
    plot_sma_and_signals(df, args.sma_short, args.sma_long, n_xticks=10)

if __name__ == "__main__":
    main()